# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bagel", "cream cheese", "coffee", "tea")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "water", "bell peppers")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
View(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("fried chicken", "steak", "lobster", "mashed potatoes")
View(meals)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bagel", "cream cheese", "coffee", "tea")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "water", "bell peppers")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(
breakfast = my_breakfast,
lunch = my_lunch
)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("fried chicken", "steak", "lobster", "mashed potatoes")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals&dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals$lunch
View(meals)
early_meals <- meals[my_breakfast, my_lunch]
early_meals <- meals["my_breakfast", "my_lunch"]
early_meals <- list(meals["my_breakfast", "my_lunch"]
early_meals <- list(
meals["my_breakfast", "my_lunch"]
)
early_meals <- list(
meals["my_breakfast", "my_lunch"])
View(meals)
View(meals)
early_meals <- ["breakfast", "lunch"]
early_meals <- meals["breakfast", "lunch"]
early_meals <- list(meals["breakfast", "lunch"])
early_meals <- list(meals[c("breakfast", "lunch")])
View(early_meals)
View(early_meals)
View(meals)
early_meals <- meals[c("breakfast", "lunch")]
View(early_meals)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
runif(10)
?as.list()
as.list(number_list, runif(10)
as.list(runif(10)
as.list(runif(10)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
number_list <- runif(10)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
number_list <- c(runif(10))
as.list(number_list)
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
number_vector <- c(runif(10))
number_list <- as.list(number_vector)
View(number_list)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(number_list, round, .1)
View(number_list)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
number_list <- lapply(number_list, round, .1)
View(number_list)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "I want to go to sleep because I went to bed late. It is hard to wake up when you go to bed late because you are tired in the morning."
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "I want to go to sleep because I went to bed late."
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence)
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence, "")
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
sentence_vector <- strsplit(sentence, "")
View(sentence_vector)
# Extract the vector of letters from the resulting list
sentence[[1]]
# Extract the vector of letters from the resulting list
sentence[1]
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
sentence_list <- strsplit(sentence, "")
# Extract the vector of letters from the resulting list
sentence_list[[1]]
# Extract the vector of letters from the resulting list
sentence_vector<-sentence_list[[1]]
# Use the `unique()` function to get a vector of unique letters
?unique()
sentence_unique <- unique(sentence_vector)
letter_vector[letter]
num_occurances
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurences <- function(letter, letter_vector) {
num_occurances <- letter_vector[letter]
num_occurances
}
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurences <- function(letter, letter_vector) {
num_occurences <- letter_vector[letter]
num_occurences
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurences("e", sentence_vector)
?count()
?count_occurences
?count_occurences()
?count()
}
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurences <- function(letter, letter_vector) {
number <- 0
if (letter == letter_vector) {
number + 1}
else {
number + 0
}
number
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurences("e", sentence_vector)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurences <- function(letter, letter_vector) {
letter == letter_vector
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurences("e", sentence_vector)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurences <- function(letter, letter_vector) {
match <- letter == letter_vector
number_occurences <-sum(match)
number_occurences
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurences("e", sentence_vector)
sapply(sentence_unique, count_occurences)
sapply(sentence_unique, count_occurences, "e")
sapply(sentence_vector, count_occurences, "e", sentence_unique)
sapply(sentence_unique, count_occurences, "e", sentence_vector)
sapply(sentence_vector, count_occurences, sentence_unique)
sapply(sentence_vector, count_occurences)
sapply(sentence_vector, count_occurences, sentence_unique)
count_occurences(sentence_unique, sentence_vector)
sapply(sentence_vector, count_occurences, unique(sentence_vector))
sapply(sentence_vector, count_occurences, unique(sentence_vector), sentence_vector)
sapply(sentence_vector, count_occurences, unique(sentence_vector))
list <- as.list(sapply(sentence_vector, count_occurences, unique(sentence_vector)))
View(list)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurences("s", sentence_vector)
unique(sentence_vector)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurences <- function(letter_vector, letter) {
match <- letter == letter_vector
number_occurences <-sum(match)
number_occurences
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurences(sentence_vector, "s")
sapply(sentence_vector, count_occurences, unique(sentence_vector))
list_occurence <- as.list(sapply(sentence_vector, count_occurences, unique(sentence_vector)))
View(list_occurence)
# Print the resulting list of frequencies
print(list_occurence)
list_occurence <- as.list(sapply(unique(sentence_vector), count_occurences, sentence_vector))
# Print the resulting list of frequencies
print(list_occurence)
