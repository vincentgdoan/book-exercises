install.packages("devtools")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
library(dyplr)
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
manufactured_in_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
arrange(manufactured_in_1997, by = hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
View(arrange(manufactured_in_1997, by = hwy))
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_by_highway <- arrange(manufactured_in_1997, by = hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
manufactured_in_1997 <- mutate(manufactured_in_1997,
average = (hwy * city)/2
)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
manufactured_in_1997 <- mutate(manufactured_in_1997,
average = (hwy * cty) / 2
)
View(manufactured_in_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
manufactured_in_1997 <- mutate(manufactured_in_1997,
average = (hwy + cty) / 2
)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
manufactured_in_1997 <- mutate(manufactured_in_1997,
average = (hwy + cty) / 2
)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive = Front-Wheel Drive & Rear-Wheel Drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive = Front-Wheel Drive + Rear-Wheel Drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive = Front-Wheel Drive, drive = Rear-Wheel Drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive = Front-Wheel Drive && drive = Rear-Wheel Drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == Front-Wheel Drive, drive == Rear-Wheel Drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive", drive == "Rear-Wheel Drive")
View(two_wheel_drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" && drive == "Rear-Wheel Drive")
View(two_wheel_drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" + "Rear-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" | "Rear-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" | "Rear-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" || "Rear-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" || drive == "Rear-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" | "Rear-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_drive <- filter(vehicles, drive == "Front-Wheel Drive" | drive == "Rear-Wheel Drive")
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(two_wheel_drive,
filter(two_wheel_drive,
hwy == min(hwy)
)
)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(two_wheel_drive, id ==
filter(two_wheel_drive,
hwy == min(hwy)
)
)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(two_wheel_drive,
filter(two_wheel_drive,
hwy == min(hwy)
)
)
hwy == min(hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel_drive, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(two_wheel_drive, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mileage_id <- select(filter(two_wheel_drive, hwy == min(hwy)), id)
best_car <- function(year_choice, make_choice){
select(filter(filter(filter(vehicles, year_choice), make_choice), hwy = max(hwy)) , model)
}
# What was the most efficient Honda model of 1995?
best_car(2000, Toyota)
# What was the most efficient Honda model of 1995?
best_car("2000", "Toyota")
best_car <- function(year_choice, make_choice){
returned_car <- select(filter(filter(filter(vehicles, year_choice), make_choice), hwy = max(hwy)) , model)
returned_car
}
# What was the most efficient Honda model of 1995?
best_car("2000", "Toyota")
best_car <- function(year_choice, make_choice){
returned_car <- select(filter(filter(filter(vehicles, year_choice), make_choice), hwy == max(hwy)) , model)
returned_car
}
# What was the most efficient Honda model of 1995?
best_car("2000", "Toyota")
filter(filter(filter(vehicles, year_choice), make_choice), hwy == max(hwy))
filter(filter(filter(vehicles, 2000), Toyota), hwy == max(hwy))
filter(vehicles, 2000)
best_car <- function(year_choice, make_choice){
returned_car <- select(filter(filter(filter(vehicles, year == year_choice), make == make_choice), hwy == max(hwy)) , model)
returned_car
}
# What was the most efficient Honda model of 1995?
best_car("2000", "Toyota")
# What was the most efficient Honda model of 1995?
best_car("1995", "Honda")
best_car <- function(year_choice, make_choice){
vehicles %>%
filter(year == year_choice) %>%
filter(make == make_choice) %>%
filter(hwy == max(hwy))
select(model)
}
best_car("2000", "Toyota")
View(vehicles)
best_car <- function(year_choice, make_choice){
vehicles %>%
filter(year == year_choice) %>%
filter(make == make_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
best_car("2000", "Toyota")
