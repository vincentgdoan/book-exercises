# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
library(nycflights13)
View(nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
library("nycflights13")
View(nycflights13)
View("nycflights13")
View(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
View(nycflights13)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
delay = arr_delay - dep_delay)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
delay = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
flight_delay = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
flight_delay = arr_delay - dep_delay)
descending_flights <- arrange(flights, -flight_delay)
View(descending_flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
descending_flights<- arrange(flights, -flight_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
descending_flights <- arrange(flights, -flight_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
arrange(flights, -flight_delay) %>%
descending_flights
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
descending_flights <- flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
arrange(flights, -flight_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
descending_flights <- flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
arrange(flights, -flight_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
descending_flights <- flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
arrange(-flight_delay)
# Make a histogram of the amount of time gained using the `hist()` function
his(select(descending_flights, flight delay))
# Make a histogram of the amount of time gained using the `hist()` function
his(select(descending_flights, flight_delay))
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(descending_flights, flight_delay))
# Make a histogram of the amount of time gained using the `hist()` function
hist(as.vector(select(descending_flights, flight_delay)))
select(descending_flights, flight_delay)
?hist()
# Make a histogram of the amount of time gained using the `hist()` function
flight_delay_values <- as.vector(select(descending_flights, flight_delay))
hist(flight_delay_values)
hist(c(1,2,3,4))
hist(c(-1,1,2,3,4))
hist(flight_delay_values)
View(flight_delay_values)
hist(flight_delay_values, na.rm = TRUE)
# Make a histogram of the amount of time gained using the `hist()` function
flight_delay_values <- as.vector(select(descending_flights, flight_delay), na.rm = TRUE)
?as.vector()
# Make a histogram of the amount of time gained using the `hist()` function
hist(descending_flights)
View(descending_flights)
?hist()
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
flight_delay = arr_delay - sched_arr_time)
descending_flights <- arrange(flights, -flight_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
descending_flights <- flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
arrange(-flight_delay)
# Make a histogram of the amount of time gained using the `hist()` function
hist(descending_flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(descending_flights, na.rm = TRUE)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
descending_flights <- flights %>%
mutate(flight_delay = arr_delay - sched_arr_time) %>%
arrange(-flight_delay)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(descending_flights, flight_delay), na.rm = TRUE)
# Make a histogram of the amount of time gained using the `hist()` function
hist(descending_flights[["flight_delay"]], na.rm = TRUE)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
descending_flights <- flights %>%
mutate(flight_delay = arr_delay - dep_delay) %>%
arrange(-flight_delay)
# Make a histogram of the amount of time gained using the `hist()` function
hist(descending_flights[["flight_delay"]], na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average(descending_flights[["flight_delay"]])
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average(descending_flights[["flight_delay"]])
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(descending_flights[["flight_delay"]])
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(descending_flights[["flight_delay"]], na.rm = TRUE)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
flight_delay = arr_delay - dep_delay)
headed_to_sea<- flights %.%
filter(destination == "SEA") %>%
select(origin, destination, flight_delay)
headed_to_sea<- flights %.%
filter(destination == "SEA") %>%
select(origin, destination, flight_delay)
headed_to_sea<- flights %>%
filter(destination == "SEA") %>%
select(origin, destination, flight_delay)
headed_to_sea<- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, flight_delay)
# On average, did flights to SeaTac gain or loose time?
mean(select(headed_to_sea, flight_delay), na.rm = TRUE)
# On average, did flights to SeaTac gain or loose time?
mean(select(headed_to_sea[["flight_delay"]]), na.rm = TRUE)
# On average, did flights to SeaTac gain or loose time?
mean(headed_to_sea[["flight_delay"]], na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary_air_time<- flights %>%
filter(origin == "JFK") %>%
filter(dest == "SEA") %>%
summarize(
average_air_time = mean(air_time, na.rm = TRUE)
min_air_time = min(air_time, na.rm = TRUE)
max_air_time = max(air_time, na.rm = TRUE)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary_air_time <- flights %>%
filter(origin == "JFK") %>%
filter(dest == "SEA") %>%
summarize(
average_air_time = mean(air_time, na.rm = TRUE)
min_air_time = min(air_time, na.rm = TRUE)
max_air_time = max(air_time, na.rm = TRUE)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary_air_time <- flights %>%
filter(origin == "JFK") %>%
filter(dest == "SEA") %>%
summarize(
average_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE)
)
View(summary_air_time)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
mean_departure_delay = mean(dep_delay, na.rm = TRUE)
)
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
max(dep_delay_by_month)
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(dep_delay == max(dep_delay))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean_departure_delay == max(mean_departure_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
mean_arrival_delay = mean(arr_delay, na.rm = TRUE) %>%
arrange(mean_arrival_delay)
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
mean_arrival_delay = mean(arr_delay, na.rm = TRUE) %>%
arrange(mean_arrival_delay)
)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
mean_arrival_delay = mean(arr_delay, na.rm = TRUE)
arrange(mean_arrival_delay)
)
arrange(mean_arrival_delay)
mean_arrival_delay = mean(arr_delay, na.rm = TRUE))%>%
arrange(mean_arrival_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
mean_arrival_delay = mean(arr_delay, na.rm = TRUE))
View(arr_delay_by_month
View(arr_delay_by_month)
View(arr_delay_by_month)
) %>%
arrange(by_group = TRUE)
mean_arrival_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(by_group = TRUE)
mean_arrival_delay = mean(arr_delay, na.rm = TRUE)) %>%
?head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
mean_arrival_delay = mean(arr_delay, na.rm = TRUE))
arrange(arr_delay_by_month, arr_delay)
head(arr_delay_by_month)
mutate(speed = distance/ (hour + (minute / 60))
View(highest_avg_speed)
# Which city was flown to with the highest average speed?
highest_avg_speed <- flights %>%
mutate(speed = distance/ (hour + (minute / 60)))
View(highest_avg_speed)
# Which city was flown to with the highest average speed?
highest_avg_speed <- flights %>%
mutate(speed = distance/ (hour + (minute / 60))) %>%
filter(speed == max(speed)) %>%
select(dest)
highest_avg_speed
# Which city was flown to with the highest average speed?
highest_avg_speed <- flights %>%
mutate(speed = distance/ (hour + (minute / 60))) %>%
filter(speed == max(speed)) %>%
summarize(
dest,
max_avg_speed = max(speed)
)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
flights %>%
group_by(dest)%>%
summarize(
average_arrival_delay = mean(arr_delay,na.rm = TRUE)
)
airports
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delay_by_dest <- flights %>%
group_by(dest)%>%
summarize(
average_arrival_delay = mean(arr_delay,na.rm = TRUE)
)
View(avg_arr_delay_by_dest)
View(airports)
left_join(airports, avg_arr_delay_by_dest, by - "dest")
left_join(airports, avg_arr_delay_by_dest)
?nycflights13
left_join(airports, avg_arr_delay_by_dest, by = "faa")
left_join(airports, avg_arr_delay_by_dest, by = "faa")
left_join(airports, avg_arr_delay_by_dest, by = c("faa" = "dest"))
joined_airports_avg_arr_delay<- left_join(airports, avg_arr_delay_by_dest, by = c("faa" = "dest"))
View(joined\)
View(joined_airports_avg_arr_delay)
joined_airports_avg_arr_delay<- left_join(avg_arr_delay_by_dest, airports, by = c("faa" = "dest"))
joined_airports_avg_arr_delay<- left_join(avg_arr_delay_by_dest, airports, by = c("dest" = "faa"))
filter(joined_airports_avg_arr_delay, average_arrival_delay = max(average_arrival_delay, na.rm = TRUE))
filter(joined_airports_avg_arr_delay, average_arrival_delay == max(average_arrival_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
filter(joined_airports_avg_arr_delay, average_arrival_delay == min(average_arrival_delay, na.rm = TRUE))
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
?read.csv()
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(nba_teams_2016.csv)
setwd("~/Desktop/book-exercises/chapter-11-exercises/exercise-7")
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(nba_teams_2016.csv)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(data/nba_teams_2016.csv)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(/data/nba_teams_2016.csv)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(data/nba_teams_2016.csv)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(file = data/nba_teams_2016.csv)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(file = 'data/nba_teams_2016.csv')
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv(file = "data/nba_teams_2016.csv")
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv("data/nba_teams_2016.csv")
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv("data/nba_teams_2016.csv")
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nba_teams_2016 <- read.csv("data/nba_teams_2016.csv")
# View the data frame you loaded, and get some basic information about the
# number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*" following
# the names of teams that made it to the playoffs that year.
View(nba_teams_2016)
ncol(nba_teams_2016)
nrow(nba_teams_2016)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams_2016 < nba_teams_2016 %>%
mutate(turnover_steal_ratio = TOV / STIL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams_2016 < nba_teams_2016 %>%
mutate(turnover_steal_ratio = TOV / STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams_2016 <- mutate(
nba_teams_2016,
turnover_steal_ratio = TOV / STL)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
arrange(nba_teams_2016, -turnover_steal_ratio)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
nba_teams_2016 <- arrange(nba_teams_2016, -turnover_steal_ratio)
tail(nba_teams_2016)
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
nba_teams_2016 <- nba_teams_2016 %>%
mutate(assists_per_game = AST / G) %>%
arrange(-assists_per_game)
# Create a data frame called `good_offense` of teams that scored more than
# 8700 points (PTS) in the season
good_offense <- nba_teams_2016 %>%
filter(PTS = PTS > 8700)
# Create a data frame called `good_offense` of teams that scored more than
# 8700 points (PTS) in the season
good_offense <- nba_teams_2016 %>%
filter(PTS == PTS > 8700)
# Create a data frame called `good_offense` of teams that scored more than
# 8700 points (PTS) in the season
good_offense <- nba_teams_2016 %>%
filter(PTS > 8700)
View(good_offense)
# Create a data frame called `good_defense` of teams that had more than
# 470 blocks (BLK)
good_defense <- nba_teams_2016 %>%
filter(BLK > 470)
# Create a data frame called `offense_stats` that only shows offensive
# rebounds (ORB), field-goal % (FG.), and assists (AST) along with the team name.
offense_stats <- nba_teams_2016 %>%
select(Team, ORB, FG., AST)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nba_teams_2016 <- read.csv("data/nba_teams_2016.csv")
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nba_teams_2016 <- mutate(
nba_teams_2016,
turnover_steal_ratio = TOV / STL)
tail(nba_teams_2016)
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
nba_teams_2016 <- nba_teams_2016 %>%
mutate(assists_per_game = AST / G) %>%
arrange(-assists_per_game)
# Create a data frame called `good_offense` of teams that scored more than
# 8700 points (PTS) in the season
good_offense <- nba_teams_2016 %>%
filter(PTS > 8700)
# Create a data frame called `good_defense` of teams that had more than
# 470 blocks (BLK)
good_defense <- nba_teams_2016 %>%
filter(BLK > 470)
# Create a data frame called `offense_stats` that only shows offensive
# rebounds (ORB), field-goal % (FG.), and assists (AST) along with the team name.
offense_stats <- nba_teams_2016 %>%
select(Team, ORB, FG., AST)
# Create a data frame called `defense_stats` that only shows defensive
# rebounds (DRB), steals (STL), and blocks (BLK) along with the team name.
defense_stats <- nba_teams_2016 %>%
select(Team, DRB, STL, BLK)
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team_one, team_two) {
row_team_one <- filter(nba_teams_2016, Team == team_one)
row_team_two <- filter(nba_teams_2016, Team == team_two)
if(row_team_one[["FG."]] > row_team_two[["FG."]]) {
select(row_team_one, FG., PTS)
}
else{
select(row_team_two, FG., PTS)
}
}
# Call the function on two teams to compare them (remember the `*` if needed)
better_shooters("Boston Celtics*", "Orlando Magic")
# Create a function called `better_shooters` that takes in two teams and returns
# a data frame of the team with the better field-goal percentage. Include the
# team name, field-goal percentage, and total points in your resulting data frame
better_shooters <- function(team_one, team_two) {
row_team_one <- filter(nba_teams_2016, Team == team_one)
row_team_two <- filter(nba_teams_2016, Team == team_two)
if(row_team_one[["FG."]] > row_team_two[["FG."]]) {
select(row_team_one, Team, FG., PTS)
}
else{
select(row_team_two, Team, FG., PTS)
}
}
# Call the function on two teams to compare them (remember the `*` if needed)
better_shooters("Boston Celtics*", "Orlando Magic")
# Call the function on two teams to compare them (remember the `*` if needed)
better_shooters("Boston Celtics*", "Denver Nuggets")
