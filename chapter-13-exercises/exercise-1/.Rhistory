install.packages("tidyverse")
library("tidyverse")
setwd("~/Desktop/book-exercises/chapter-12-exercises/exercise-1")
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
read.csv(file = "data/avocado.csv", stringsAsFactors = F)
View(avocados)
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv(file = "data/avocado.csv", stringsAsFactors = F)
View(avocados)
# To tell R to treat the `Date` column as a date (not just a string)
# Redefine that column as a date using the `as.Date()` function
# (hint: use the `mutate` function)
avocados <- mutate(avocados,
Date = as.Date(avocados[["Date"]]))
avocados[["Date"]]
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
avocados <- rename(avocados,
small_haas = X4046,
large_haas = X4225,
xlarge_haas = X4770)
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- avocados %<%
mutate(other_avos = Total.Volume - small - large - xlarge)
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- avocados %<%
mutate(other_avos = Total.Volume - small_haas - large_haas - xlarge_haas)
mutate(other_avos = (Total.Volume - small_haas - large_haas - xlarge_haas)
mutate(other_avos = (Total.Volume - small_haas - large_haas - xlarge_haas)
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- avocados %<%
mutate(other_avos = (Total.Volume - small_haas - large_haas - xlarge_haas))
library(dplyr)
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- avocados %<%
mutate(other_avos = (Total.Volume - small_haas - large_haas - xlarge_haas))
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- mutate(avocados,
other_avos = (Total.Volume - small_haas - large_haas - xlarge_haas))
by_size <- select(avocados,
Date,
other_avos,
small_haas,
large_haas,
xlarge_haas)
View(by_size)
?gather()
size_gathered <- by_size %>%
gather(key = size,
value = volume,
-Date)
View(size_gathered)
# Using `size_gathered`, compute the average sales volume of each size
# (hint, first `group_by` size, then compute using `summarize`)
size_gathered %>%
group_by(size) %>%
summarize(mean_volume = mean(volume))
# This shape also facilitates the visualization of sales over time
# (how to write this code is covered in Chapter 16)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
# We can also investigate sales by avocado type (conventional, organic).
# Create a new data frame `by_type` by grouping the `avocados` dataframe by
# `Date` and `type`, and calculating the sum of the `Total.Volume` for that type
# in that week (resulting in a data frame with 2 rows per week).
by_type <- avocados %>%
group_by(Date, type) %>%
summarize(sum_volume = sum(Total.Volume, na.rm = TRUE))
View(by_type)
by_type_wide <- by_type %>%
spread(key = type,
value = sum_volume)
View(by_type_wide)
# Now you can create a scatterplot comparing conventional to organic sales!
# (how to write this code is covered in Chapter 16)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
# Create a connection to the `Chinook_Sqlite.sqlite` file in the `data` folder
# Be sure to set your working directory!
db_connection <- dbConnect(SQLite(), dbname = "data/Chinook_Sqlite.sqlite")
library(tidyverse)
install.packages("DBI")
install.packages("RSQLite")
library(RSQLite)
# Create a connection to the `Chinook_Sqlite.sqlite` file in the `data` folder
# Be sure to set your working directory!
db_connection <- dbConnect(SQLite(), dbname = "data/Chinook_Sqlite.sqlite")
# Create a connection to the `Chinook_Sqlite.sqlite` file in the `data` folder
# Be sure to set your working directory!
db_connection <- dbConnect(SQLite(), dbname = "data/Chinook_Sqlite.sqlite")
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_connection)
source('~/Desktop/book-exercises/chapter-13-exercises/exercise-1/exercise.R', echo=TRUE)
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_connection)
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
?dbListTables()
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_connection)
# Create a connection to the `Chinook_Sqlite.sqlite` file in the `data` folder
# Be sure to set your working directory!
db_connection <- dbConnect(SQLite(), dbname = "data/Chinook_Sqlite.sqlite")
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
tabl(db_connection, "Music")
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
tbl(db_connection, "Music")
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_connection)
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
View(dbListTables(db_connection))
library(DBI)
library(RSQLite)
# Create a connection to the `Chinook_Sqlite.sqlite` file in the `data` folder
# Be sure to set your working directory!
db_connection <- dbConnect(SQLite(), dbname = "data/Chinook_Sqlite.sqlite")
setwd("~/Desktop/book-exercises/chapter-13-exercises/exercise-1")
# Create a connection to the `Chinook_Sqlite.sqlite` file in the `data` folder
# Be sure to set your working directory!
db_connection <- dbConnect(SQLite(), dbname = "data/Chinook_Sqlite.sqlite")
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_connection)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
tbl(db_connection, Genre)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
tbl(db_connection, "Genre")
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
genres <- tbl(db_connection, "Genre")
# Try to use `View()` to see the contents of the table. What happened?
View(genres)
# Use the `collect()` function to actually load the genre table into memory
# as a data frame. View that data frame.
collect(genres)
View(collect(genres))
View(genres)
# Use dplyr's `count()` function to see how many rows are in the genre table
count(genres)
?count()
# Use the `tbl()` function to create a reference the table with track data.
# Print out the the table to confirm that you've accessed it.
tbl(db_connections, "Track")
# Use the `tbl()` function to create a reference the table with track data.
# Print out the the table to confirm that you've accessed it.
tbl(db_connection, "Track")
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filting for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
track <- collect(tbl(db_connection, "Track"))
View(track)
View(genres)
# Use the `collect()` function to actually load the genre table into memory
# as a data frame. View that data frame.
genres <- collect(genres)
genres
View(genres)
?is.na()
filter(track, Composer = is.na(FALSE))
filter(track, Composer == is.na(FALSE))
View(filter(track, Composer == is.na(FALSE)))
filter(track, Composer == is.na(FALSE))
filter(track, Composer == is.na(Composer))
track <- filter(track, Composer == is.na(Composer))
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filting for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
track <- collect(tbl(db_connection, "Track"))
track <- filter(track, Composer == is.na(Composer))
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filting for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
track <- collect(tbl(db_connection, "Track"))
track <- filter(track, Composer != is.na(Composer))
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filting for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
track <- collect(tbl(db_connection, "Track"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(Composer = Composer,
popularity = count(Composer)) %>%
arrange(-popularity)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(Composer,
popularity = count(Composer)) %>%
arrange(-popularity)
popularity = count(Composer)) %>%
arrange(-popularity)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(popularity = count(Composer)) %>%
arrange(-popularity)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(popularity = count(Composer))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
group_by(Composer
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(sum_composer = count(Composer))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(sum_composer = nrow(Composer))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(sum_composer = count(track, "Composer"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
summarize(sum_composer = count(track, "Composer"))
track
print(track)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
count(Composer)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
count(Composer)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filting for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
track <- collect(tbl(db_connection, "Track"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
count(Composer)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
count(Composer) %>%
arrange(-Composer)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filting for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
track <- collect(tbl(db_connection, "Track"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
count(Composer) %>%
arrange(-Composer)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filting for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
track <- collect(tbl(db_connection, "Track"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(Composer) %>%
count(Composer) %>%
arrange(-n)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
genres <- tbl(db_connection, "Genre")
# Use the `collect()` function to actually load the genre table into memory
# as a data frame. View that data frame.
genres <- collect(genres)
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
track <- collect(tbl(db_connection, "Track"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(GenreID) %>%
count(GenreID) %>%
arrange(-n) %>%
left_join(Genre, by = "GenreId")
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(GenreID) %>%
count(GenreID) %>%
arrange(-n)
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
track <- collect(tbl(db_connection, "Track"))
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
track <- collect(tbl(db_connection, "Track"))
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
track <- collect(tbl(db_connection, "Track"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
left_join(Genre, by = "GenreId")
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
track <- collect(tbl(db_connection, "Track"))
track <- track %>%
filter(Composer != is.na(Composer)) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
left_join(genres, by = "GenreId")
